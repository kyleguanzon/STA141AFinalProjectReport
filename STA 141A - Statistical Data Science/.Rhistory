min_contrast_left = numeric(),
max_contrast_left = numeric(),
min_contrast_right = numeric(),
max_contrast_right = numeric(),
num_success_trials = integer(),
num_failure_trials = integer(),
stringsAsFactors = FALSE # To keep character strings
)
# Loop through each session, read RDS file, and extract info
for(i in 1:18){
# Construct the file path
file_path <- paste0('./Data/session', i, '.rds')
# Load the RDS file
session_data <- readRDS(file_path)
# Extract mouse name and date of experiment
mouse_name <- session_data$mouse_name
date_exp <- session_data$date_exp
#num_neurons <- ncol(session_data$spks) # I'm trying to count the number of spikes in each session, but I keep getting an error
#num_trials = session_data$num_trials
# Append the information to the session_info data frame
session_info <- rbind(session_info, data.frame(session_number = i,
mouse_name = mouse_name,
date_exp = date_exp,
#num_neurons = num_neurons,
#num_trials = num_trials,
stringsAsFactors = FALSE))
}
# View the consolidated data frame
print(session_info)
# Load necessary libraries
library(dplyr)
# Initialize an empty data frame to store session info
session_info <- data.frame(
session_number = integer(),
num_neurons = numeric(),
num_trials = integer(),
min_contrast_left = numeric(),
max_contrast_left = numeric(),
min_contrast_right = numeric(),
max_contrast_right = numeric(),
num_success_trials = integer(),
num_failure_trials = integer(),
stringsAsFactors = FALSE # To keep character strings
)
# Loop through each session, read RDS file, and extract info
for(i in 1:18){
# Construct the file path
file_path <- paste0('./Data/session', i, '.rds')
# Load the RDS file
session_data <- readRDS(file_path)
# Extract mouse name and date of experiment
mouse_name <- session_data$mouse_name
date_exp <- session_data$date_exp
num_neurons <- ncol(session_data$spks) # I'm trying to count the number of spikes in each session, but I keep getting an error
#num_trials = session_data$num_trials
# Append the information to the session_info data frame
session_info <- rbind(session_info, data.frame(session_number = i,
mouse_name = mouse_name,
date_exp = date_exp,
num_neurons = num_neurons,
#num_trials = num_trials,
stringsAsFactors = FALSE))
}
library(dplyr)
library(ggplot2)
library(readr)
library(tidyverse)
install.packages("caret")
library(caret)
session=list()
for(i in 1:18){
session[[i]]=readRDS(paste('./Data/session',i,'.rds',sep=''))
print(session[[i]]$mouse_name)
print(session[[i]]$date_exp)
}
# What's in a session?
names(session[[1]])
# What's in a trail?
dim(session[[1]]$spks[[1]])
length(session[[12]]$brain_area)
session[[1]]$spks[[1]][6,] # Each row contains x time bins.
# How to connect the neuron spike with brain region?
session[[1]]$spks[[1]][6,3]
session[[1]]$brain_area[6]
#The above information tells us in session 1 trail 1, the 6 neuron (from area ACA) has a spike at time bin 3.
get_trail_data <- function(session_id, trail_id){
spikes <- session[[session_id]]$spks[[trail_id]]
if (any(is.na(spikes))){
disp("value missing")
}
#trail_tibble <- as_tibble(spikes) %>% set_names(binename) %>%  add_column("brain_area" = session[[session_id]]$brain_area ) %>% group_by(brain_area) %>% summarize( "sum_spikes" =across(everything(),sum),.groups = "drop")
trail_tibble <- tibble("neuron_spike" = rowSums(spikes))  %>%  add_column("brain_area" = session[[session_id]]$brain_area ) %>% group_by(brain_area) %>% summarize( region_sum_spike = sum(neuron_spike), region_count = n(),region_mean_spike = mean(neuron_spike))
trail_tibble  = trail_tibble%>% add_column("trail_id" = trail_id) %>% add_column("contrast_left"= session[[session_id]]$contrast_left[trail_id]) %>% add_column("contrast_right"= session[[session_id]]$contrast_right[trail_id]) %>% add_column("feedback_type"= session[[session_id]]$feedback_type[trail_id])
trail_tibble
}
trail_tibble_1_2 <- get_trail_data(1,2)
trail_tibble_1_2
#session_1 <- get_session_data(1)
#head(session_1)
library(dplyr)
library(ggplot2)
library(readr)
library(tidyverse)
install.packages("caret")
library(caret)
session=list()
for(i in 1:18){
session[[i]]=readRDS(paste('./Data/session',i,'.rds',sep=''))
print(session[[i]]$mouse_name)
print(session[[i]]$date_exp)
}
install.packages("caret")
library(dplyr)
library(ggplot2)
library(readr)
library(tidyverse)
install.packages("caret")
library(caret)
session=list()
for(i in 1:18){
session[[i]]=readRDS(paste('./Data/session',i,'.rds',sep=''))
print(session[[i]]$mouse_name)
print(session[[i]]$date_exp)
}
# What's in a session?
names(session[[1]])
# What's in a trail?
dim(session[[1]]$spks[[1]])
length(session[[12]]$brain_area)
session[[1]]$spks[[1]][6,] # Each row contains x time bins.
# How to connect the neuron spike with brain region?
session[[1]]$spks[[1]][6,3]
session[[1]]$brain_area[6]
#The above information tells us in session 1 trail 1, the 6 neuron (from area ACA) has a spike at time bin 3.
get_trail_data <- function(session_id, trail_id){
spikes <- session[[session_id]]$spks[[trail_id]]
if (any(is.na(spikes))){
disp("value missing")
}
#trail_tibble <- as_tibble(spikes) %>% set_names(binename) %>%  add_column("brain_area" = session[[session_id]]$brain_area ) %>% group_by(brain_area) %>% summarize( "sum_spikes" =across(everything(),sum),.groups = "drop")
trail_tibble <- tibble("neuron_spike" = rowSums(spikes))  %>%  add_column("brain_area" = session[[session_id]]$brain_area ) %>% group_by(brain_area) %>% summarize( region_sum_spike = sum(neuron_spike), region_count = n(),region_mean_spike = mean(neuron_spike))
trail_tibble  = trail_tibble%>% add_column("trail_id" = trail_id) %>% add_column("contrast_left"= session[[session_id]]$contrast_left[trail_id]) %>% add_column("contrast_right"= session[[session_id]]$contrast_right[trail_id]) %>% add_column("feedback_type"= session[[session_id]]$feedback_type[trail_id])
trail_tibble
}
trail_tibble_1_2 <- get_trail_data(1,2)
trail_tibble_1_2
#session_1 <- get_session_data(1)
#head(session_1)
# Load necessary libraries
library(dplyr)
# Initialize an empty data frame to store session info
session_info <- data.frame(
session_number = integer(),
num_neurons = integer(),
num_trials = integer(),
min_contrast_left = numeric(),
max_contrast_left = numeric(),
min_contrast_right = numeric(),
max_contrast_right = numeric(),
num_success_trials = integer(),
num_failure_trials = integer(),
stringsAsFactors = FALSE # To keep character strings
)
# Loop through each session, read RDS file, and extract info
for(i in 1:18){
# Construct the file path
file_path <- paste0('./Data/session', i, '.rds')
# Load the RDS file
session_data <- readRDS(file_path)
# Extract mouse name and date of experiment
mouse_name <- session_data$mouse_name
date_exp <- session_data$date_exp
#num_neurons <- ncol(session_data$spks) # I'm trying to count the number of spikes in each session, but I keep getting an error
#num_trials = session_data$num_trials
# Append the information to the session_info data frame
session_info <- rbind(session_info, data.frame(session_number = i,
mouse_name = mouse_name,
date_exp = date_exp,
#num_neurons = num_neurons,
#num_trials = num_trials,
stringsAsFactors = FALSE))
}
# View the consolidated data frame
print(session_info)
library(ggplot2)
library(readr)
library(MASS)
library(leaps)
# Load the data
countries <- read_csv("countries.csv")
# The total sample size
n <- nrow(countries)
# Set a random seed for reproducing with random chosen number
set.seed(2099)
# Get a random sample of size 80% * n from 1:n (the row indices)
subset_id <- sample(n, 0.8*n)
# Access the subset data by row indices and save the data in a new data set
# Saving in a new data set
countries_subset <- countries[subset_id, ]
library(gridExtra)
LandArea_plot <- ggplot(countries_subset, aes(x=LandArea, y=LifeExpectancy)) +
geom_point(size = 0.5) +  # Adjust the size of the points
geom_smooth(method = "lm", formula = y~x, se=FALSE) +
theme(
text = element_text(size = 8),  # Adjust the size of text elements globally
axis.text = element_text(size = 8),  # Adjust the size of axis text
axis.title = element_text(size = 8),  # Adjust the size of axis titles
legend.title = element_text(size = 8),  # Adjust the size of legend titles
legend.text = element_text(size = 8)  # Adjust the size of legend text
)
Population_plot <- ggplot(countries_subset, aes(x=Population, y=LifeExpectancy)) +
geom_point(size = 0.5) +  # Adjust the size of the points
geom_smooth(method = "lm", formula = y~x, se=FALSE) +
theme(
text = element_text(size = 8),  # Adjust the size of text elements globally
axis.text = element_text(size = 8),  # Adjust the size of axis text
axis.title = element_text(size = 8),  # Adjust the size of axis titles
legend.title = element_text(size = 8),  # Adjust the size of legend titles
legend.text = element_text(size = 8)  # Adjust the size of legend text
)
Rural_plot <-ggplot(countries_subset, aes(x=Rural, y=LifeExpectancy)) +
geom_point(size = 0.5) +  # Adjust the size of the points
geom_smooth(method = "lm", formula = y~x, se=FALSE) +
theme(
text = element_text(size = 8),  # Adjust the size of text elements globally
axis.text = element_text(size = 8),  # Adjust the size of axis text
axis.title = element_text(size = 8),  # Adjust the size of axis titles
legend.title = element_text(size = 8),  # Adjust the size of legend titles
legend.text = element_text(size = 8)  # Adjust the size of legend text
)
Health_plot <-ggplot(countries_subset, aes(x=Health, y=LifeExpectancy)) +
geom_point(size = 0.5) +  # Adjust the size of the points
geom_smooth(method = "lm", formula = y~x, se=FALSE) +
theme(
text = element_text(size = 8),  # Adjust the size of text elements globally
axis.text = element_text(size = 8),  # Adjust the size of axis text
axis.title = element_text(size = 8),  # Adjust the size of axis titles
legend.title = element_text(size = 8),  # Adjust the size of legend titles
legend.text = element_text(size = 8)  # Adjust the size of legend text
)
Internet_plot <-ggplot(countries_subset, aes(x=Internet, y=LifeExpectancy)) +
geom_point(size = 0.5) +  # Adjust the size of the points
geom_smooth(method = "lm", formula = y~x, se=FALSE) +
theme(
text = element_text(size = 8),  # Adjust the size of text elements globally
axis.text = element_text(size = 8),  # Adjust the size of axis text
axis.title = element_text(size = 8),  # Adjust the size of axis titles
legend.title = element_text(size = 8),  # Adjust the size of legend titles
legend.text = element_text(size = 8)  # Adjust the size of legend text
)
BirthRate_plot <-ggplot(countries_subset, aes(x=BirthRate, y=LifeExpectancy)) +
geom_point(size = 0.5) +  # Adjust the size of the points
geom_smooth(method = "lm", formula = y~x, se=FALSE) +
theme(
text = element_text(size = 8),  # Adjust the size of text elements globally
axis.text = element_text(size = 8),  # Adjust the size of axis text
axis.title = element_text(size = 8),  # Adjust the size of axis titles
legend.title = element_text(size = 8),  # Adjust the size of legend titles
legend.text = element_text(size = 8)  # Adjust the size of legend text
)
ElderlyPop_plot <-ggplot(countries_subset, aes(x=ElderlyPop, y=LifeExpectancy)) +
geom_point(size = 0.5) +  # Adjust the size of the points
geom_smooth(method = "lm", formula = y~x, se=FALSE) +
theme(
text = element_text(size = 8),  # Adjust the size of text elements globally
axis.text = element_text(size = 8),  # Adjust the size of axis text
axis.title = element_text(size = 8),  # Adjust the size of axis titles
legend.title = element_text(size = 8),  # Adjust the size of legend titles
legend.text = element_text(size = 8)  # Adjust the size of legend text
)
CO2_plot <-ggplot(countries_subset, aes(x=CO2, y=LifeExpectancy)) +
geom_point(size = 0.5) +  # Adjust the size of the points
geom_smooth(method = "lm", formula = y~x, se=FALSE) +
theme(
text = element_text(size = 8),  # Adjust the size of text elements globally
axis.text = element_text(size = 8),  # Adjust the size of axis text
axis.title = element_text(size = 8),  # Adjust the size of axis titles
legend.title = element_text(size = 8),  # Adjust the size of legend titles
legend.text = element_text(size = 8)  # Adjust the size of legend text
)
GDP_plot <-ggplot(countries_subset, aes(x=GDP, y=LifeExpectancy)) +
geom_point(size = 0.5) +  # Adjust the size of the points
geom_smooth(method = "lm", formula = y~x, se=FALSE) +
theme(
text = element_text(size = 8),  # Adjust the size of text elements globally
axis.text = element_text(size = 8),  # Adjust the size of axis text
axis.title = element_text(size = 8),  # Adjust the size of axis titles
legend.title = element_text(size = 8),  # Adjust the size of legend titles
legend.text = element_text(size = 8)  # Adjust the size of legend text
)
Cell_plot <-ggplot(countries_subset, aes(x=Cell, y=LifeExpectancy)) +
geom_point(size = 0.5) +  # Adjust the size of the points
geom_smooth(method = "lm", formula = y~x, se=FALSE) +
theme(
text = element_text(size = 8),  # Adjust the size of text elements globally
axis.text = element_text(size = 8),  # Adjust the size of axis text
axis.title = element_text(size = 8),  # Adjust the size of axis titles
legend.title = element_text(size = 8),  # Adjust the size of legend titles
legend.text = element_text(size = 8)  # Adjust the size of legend text
)
PlotsList<- list(LandArea_plot, Population_plot, Rural_plot, Health_plot, Internet_plot, BirthRate_plot, ElderlyPop_plot, CO2_plot, GDP_plot, Cell_plot)
grid.arrange(grobs = PlotsList, ncol=5)
#Summary statistics of LifeExpectancy
summary(countries_subset$LifeExpectancy)
sd(countries_subset$LifeExpectancy)
#Creating the simple model
LandArea_model <- lm(LifeExpectancy ~ LandArea, data = countries_subset)
#Residual analysis
summary(LandArea_model)
par(mfrow = c(2,2))
plot(LandArea_model)
mean(countries_subset$LandArea)
sd(residuals(LandArea_model))
#Plotting the data
ggplot(countries_subset, aes(x=LandArea, y=LifeExpectancy)) +
geom_point() +
geom_smooth(method = "lm", formula = y~x, se=FALSE)
Population_model <- lm(LifeExpectancy ~ Population, data = countries_subset)
summary(Population_model)
par(mfrow = c(2,2))
plot(Population_model)
mean(countries_subset$Population)
sd(residuals(Population_model))
ggplot(countries_subset, aes(x=Population, y=LifeExpectancy)) +
geom_point() +
geom_smooth(method = "lm", formula = y~x, se=FALSE)
Rural_model <- lm(LifeExpectancy ~ Rural, data = countries_subset)
summary(Rural_model)
par(mfrow = c(2,2))
plot(Rural_model)
mean(countries_subset$Rural)
sd(residuals(Rural_model))
ggplot(countries_subset, aes(x=Rural, y=LifeExpectancy)) +
geom_point() +
geom_smooth(method = "lm", formula = y~x, se=FALSE)
Health_model <- lm(LifeExpectancy ~ Health, data = countries_subset)
summary(Health_model)
par(mfrow = c(2,2))
plot(Health_model)
mean(countries_subset$Health)
sd(residuals(Health_model))
ggplot(countries_subset, aes(x=Health, y=LifeExpectancy)) +
geom_point() +
geom_smooth(method = "lm", formula = y~x, se=FALSE)
Internet_model <- lm(LifeExpectancy ~ Internet, data = countries_subset)
summary(Internet_model)
par(mfrow = c(2,2))
plot(Internet_model)
mean(countries_subset$Internet)
sd(residuals(Internet_model))
ggplot(countries_subset, aes(x=Internet, y=LifeExpectancy)) +
geom_point() +
geom_smooth(method = "lm", formula = y~x, se=FALSE)
BirthRate_model <- lm(LifeExpectancy ~ BirthRate, data = countries_subset)
summary(BirthRate_model)
par(mfrow = c(2,2))
plot(BirthRate_model)
mean(countries_subset$BirthRate)
sd(residuals(BirthRate_model))
ggplot(countries_subset, aes(x=BirthRate, y=LifeExpectancy)) +
geom_point() +
geom_smooth(method = "lm", formula = y~x, se=FALSE)
ElderlyPop_model <- lm(LifeExpectancy ~ ElderlyPop, data = countries_subset)
summary(ElderlyPop_model)
par(mfrow = c(2,2))
plot(ElderlyPop_model)
mean(countries_subset$ElderlyPop)
sd(residuals(ElderlyPop_model))
ggplot(countries_subset, aes(x=ElderlyPop, y=LifeExpectancy)) +
geom_point() +
geom_smooth(method = "lm", formula = y~x, se=FALSE)
CO2_model <- lm(LifeExpectancy ~ CO2, data = countries_subset)
summary(CO2_model)
par(mfrow = c(2,2))
plot(CO2_model)
mean(countries_subset$CO2)
sd(residuals(CO2_model))
ggplot(countries_subset, aes(x=CO2, y=LifeExpectancy)) +
geom_point() +
geom_smooth(method = "lm", formula = y~x, se=FALSE)
GDP_model <- lm(LifeExpectancy ~ GDP, data = countries_subset)
summary(GDP_model)
par(mfrow = c(2,2))
plot(GDP_model)
mean(countries_subset$GDP)
sd(residuals(GDP_model))
ggplot(countries_subset, aes(x=GDP, y=LifeExpectancy)) +
geom_point() +
geom_smooth(method = "lm", formula = y~x, se=FALSE)
Cell_model <- lm(LifeExpectancy ~ Cell, data = countries_subset)
summary(Cell_model)
par(mfrow = c(2,2))
plot(Cell_model)
mean(countries_subset$Cell)
sd(residuals(Cell_model))
ggplot(countries_subset, aes(x=Cell, y=LifeExpectancy)) +
geom_point() +
geom_smooth(method = "lm", formula = y~x, se=FALSE)
best_subset <- regsubsets(LifeExpectancy ~ LandArea+Population+Rural+Health+Internet+BirthRate+ElderlyPop+CO2+GDP+Cell, nvmax = 10, data = countries_subset)
#summary(best_subset)
summary(best_subset)$cp
summary(best_subset)$adjr2
final_model <- lm(LifeExpectancy ~ LandArea+Rural+Health+BirthRate+ElderlyPop+GDP+Cell, data = countries_subset)
summary(final_model)
mean(final_model)
st(final_model)
# Load necessary libraries
library(dplyr)
# Initialize an empty data frame to store session info
session_info <- data.frame(
session_number = integer(),
num_neurons = integer(),
num_trials = integer(),
min_contrast_left = numeric(),
max_contrast_left = numeric(),
min_contrast_right = numeric(),
max_contrast_right = numeric(),
num_success_trials = integer(),
num_failure_trials = integer(),
stringsAsFactors = FALSE # To keep character strings
)
# Loop through each session, read RDS file, and extract info
for(i in 1:18){
# Construct the file path
file_path <- paste0('./Data/session', i, '.rds')
# Load the RDS file
session_data <- readRDS(file_path)
# Extract mouse name and date of experiment
mouse_name <- session_data$mouse_name
date_exp <- session_data$date_exp
#num_neurons <- ncol(session_data$spks) # I'm trying to count the number of spikes in each session, but I keep getting an error
#num_trials = session_data$num_trials
# Append the information to the session_info data frame
session_info <- rbind(session_info, data.frame(session_number = i,
mouse_name = mouse_name,
date_exp = date_exp,
#num_neurons = num_neurons,
#num_trials = num_trials,
stringsAsFactors = FALSE))
}
# View the consolidated data frame
print(session_info)
# Load necessary libraries
library(dplyr)
# Initialize an empty data frame to store session info
session_info <- data.frame(
session_number = integer(),
num_neurons = integer(),
num_trials = integer(),
min_contrast_left = numeric(),
max_contrast_left = numeric(),
min_contrast_right = numeric(),
max_contrast_right = numeric(),
num_success_trials = integer(),
num_failure_trials = integer(),
stringsAsFactors = FALSE # To keep character strings
)
# Loop through each session, read RDS file, and extract info
for(i in 1:18){
# Construct the file path
file_path <- paste0('./Data/session', i, '.rds')
# Load the RDS file
session_data <- readRDS(file_path)
# Extract mouse name and date of experiment
mouse_name <- session_data$mouse_name
date_exp <- session_data$date_exp
#num_neurons <- ncol(session_data$spks) # I'm trying to count the number of spikes in each session, but I keep getting an error
#num_trials = session_data$num_trials
# Append the information to the session_info data frame
session_info <- rbind(session_info, data.frame(session_number = i,
mouse_name = mouse_name,
date_exp = date_exp,
#num_neurons = num_neurons,
#num_trials = num_trials,
stringsAsFactors = FALSE))
}
# View the consolidated data frame
print(session_info)
# Load necessary libraries
library(dplyr)
# Initialize an empty data frame to store session info
session_info <- data.frame(
session_number = integer(),
num_neurons = integer(),
num_trials = integer(),
min_contrast_left = numeric(),
max_contrast_left = numeric(),
min_contrast_right = numeric(),
max_contrast_right = numeric(),
num_success_trials = integer(),
num_failure_trials = integer(),
stringsAsFactors = FALSE # To keep character strings
)
# Loop through each session, read RDS file, and extract info
for(i in 1:18){
# Construct the file path
file_path <- paste0('./Data/session', i, '.rds')
# Load the RDS file
session_data <- readRDS(file_path)
# Extract mouse name and date of experiment
mouse_name <- session_data$mouse_name
date_exp <- session_data$date_exp
num_neurons <- ncol(session_data$spks) # I'm trying to count the number of spikes in each session, but I keep getting an error
#num_trials = session_data$num_trials
# Append the information to the session_info data frame
session_info <- rbind(session_info, data.frame(session_number = i,
mouse_name = mouse_name,
date_exp = date_exp,
num_neurons = num_neurons,
#num_trials = num_trials,
stringsAsFactors = FALSE))
}
